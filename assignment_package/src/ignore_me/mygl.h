#ifndef MYGL_H
#define MYGL_H

#include "glwidget277.h"
#include <implement_me/utils.h>
#include "shaderprogram.h"
#include "camera.h"
#include <implement_me/utils.h>
#include "pointvisualizer.h"
#include "gridvisualizer.h"
#include <QOpenGLVertexArrayObject>
#include <QOpenGLShaderProgram>
#include <QSound>
#include "errorwindow.h"


class MyGL
    : public GLWidget277
{
    Q_OBJECT
private:
    Camera camera;
    ShaderProgram prog_flat;// A shader program that uses "flat" reflection (no shadowing at all)

    GLuint vao; // A handle for our vertex array object. This will store the VBOs created in our geometry classes.

    Drawable* sampleGrid; // Points to one of the drawable instances we have, and is set in setSampleGrid().
                          // Used to draw a grid representing the area over which samples are distributed.

    Sampler sampler; // Generates and returns a collection of 3D points based on warping samples on a [0, 1) square.
    PointVisualizer pointVisualizer; // A Drawable that generates a VBO to draw the points generated by sampler.
    GridVisualizer gridVisualizer; // A Drawable that generates a VBO to draw a grid containing the points generated by the sampler.

    int numSamples;
    SampleMode sampleMode;
    WarpMethod warpMethod;

    int mX, mY;

public:
    explicit MyGL(QWidget *parent = 0);
    ~MyGL();

    void initializeGL();
    void resizeGL(int w, int h);
    void paintGL();

    bool displayGrid;
    void refreshVisuals();


    ErrorWindow errorWindow;

protected:
    void keyPressEvent(QKeyEvent *e);
    void mousePressEvent(QMouseEvent *e);
    void mouseMoveEvent(QMouseEvent *e);

public slots:
    void slot_setSamples(int);
    void slot_setSampleMode(SampleMode);
    void slot_setWarpMethod(WarpMethod);
    int computePDFs();
    void slot_updateThetaMax(int);

signals:
    void sig_updateNumSamples(int);
    void sig_fixWarpMethodBox(int);
    void sig_fixSampleModeBox(int);

    void sig_sendPDFs(float, float, float, float, float);

private:
    QSound nope;
    QSound incorrect;
    QSound doh;
    int counter;
};


#endif // MYGL_H
